#!/usr/bin/perl -w
use strict;
use warnings;

our $VERSION = "1.000";

# Avoid loading Garmin::FIT::Streamer::Profile
$INC{"Garmin/FIT/Streamer/Profile.pm"} = "dummy";

use lib "lib";
require Garmin::FIT::Streamer;

use Digest::CRC qw(crc16);
use Data::Dumper;
$Data::Dumper::Indent = 1;
$Data::Dumper::Sortkeys = 1;

my %type_class = (
    date_time		=> "Garmin::FIT::Streamer::Type::DateTime",
    local_date_time	=> "Garmin::FIT::Streamer::Type::LocalDateTime",
);

# We do bit_reverses here since we want the second argument of crc16_multiply
# to NOT be bit reversed. That allows the shifts in crc16_multiply to be done
# without masks
sub bit_reverse {
    return oct("0b" . reverse sprintf("%016b", shift));
}

# Construct a CRC16 byte shift table
my $crc16_modulo;
my $crc16_1   = bit_reverse(1);
my $crc16_256 = bit_reverse(256);
# The initial value doesn't really matter as long as it's not 0
my $work = $crc16_1;
for (1..2**16) {
    $crc16_modulo++;
    $work = Garmin::FIT::Streamer::crc16_multiply($work, $crc16_256);
    if ($work == $crc16_1) {
        $crc16_modulo = $_;
        last;
    }
}
$crc16_modulo || die "No power gives 1";

if (0) {
    my @crc16 = ($crc16_256);
    # Construct a table we can use up the needed number of bytes
    $work = $crc16_modulo;
    while ($work >>= 1) {
        push @crc16, Garmin::FIT::Streamer::crc16_multiply($crc16[-1], $crc16[-1]);
    }
}

# We could generate one huge 128k table
# But let's generate two small tables instead at the cost of one extra
# crc16_multiply when doing a crc16_shift
my @crc16_low;
$work = $crc16_1;
for (1..256) {
    push @crc16_low, $work;
    $work = Garmin::FIT::Streamer::crc16_multiply($work, $crc16_256);
}
my @crc16_high;
my $high = $crc16_1;
for (0 .. $crc16_modulo/256) {
    push @crc16_high, $high;
    $high = Garmin::FIT::Streamer::crc16_multiply($high, $work);
}

my @base_types = (
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "enum",
        number	=> 0x00,
        size	=> 1,
        decoder	=> ["C", "C"],
        invalid	=> 0xff,
        regex	=> '^[0-9]+\z',
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "sint8",
        number	=> 0x01,
        size	=> 1,
        decoder	=> ["c", "c"],
        invalid	=> 0x7f,
        regex	=> '^[+-]?[0-9]+\z',
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "uint8",
        number	=> 0x02,
        size	=> 1,
        decoder	=> ["C", "C"],
        invalid	=> 0xff,
        regex	=> '^[0-9]+\z',
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "sint16",
        number	=> 0x83,
        size	=> 2,
        decoder	=> ["v!", "n!"],
        invalid	=> 0x7fff,
        regex	=> '^[+-]?[0-9]+\z',
        notice	=> 1,
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "uint16",
        number	=> 0x84,
        size	=> 2,
        decoder	=> ["v", "n"],
        invalid	=> 0xffff,
        regex	=> '^[0-9]+\z',
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "sint32",
        number	=> 0x85,
        size	=> 4,
        decoder	=> ["V!", "N!"],
        invalid	=> 0x7fffffff,
        regex	=> '^[+-]?[0-9]+\z',
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "uint32",
        number	=> 0x86,
        size	=> 4,
        decoder	=> ["V", "N"],
        invalid	=> 0xffffffff,
        regex	=> '^[0-9]+\z',
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "string",
        number	=> 0x07,
        size	=> 0,
        decoder	=> ["Z", "Z"],
        invalid	=> 0x00,
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "float32",
        number	=> 0x88,
        size	=> 4,
        decoder	=> ["f<", "f>"],
        invalid	=> 0xffffffff,
        regex	=> '^[+-]?[0-9]+(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?\z',
        notice	=> 1,
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "float64",
        number	=> 0x89,
        size	=> 4,
        decoder	=> ["d<", "d>"],
        invalid	=> 0xffffffffffffffff,
        regex	=> '^[+-]?[0-9]+(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)\z',
        notice	=> 1,
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "uint8z",
        number	=> 0x0A,
        size	=> 1,
        decoder	=> ["C", "C"],
        invalid	=> 0x00,
        regex	=> '^[0-9]+\z',
        notice	=> 1,
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "uint16z",
        number	=> 0x8B,
        size	=> 2,
        decoder	=> ["v", "n"],
        invalid	=> 0x0000,
        regex	=> '^[0-9]+\z',
        notice	=> 1,
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "uint32z",
        number	=> 0x8C,
        size	=> 4,
        decoder	=> ["V", "N"],
        invalid	=> 0x00000000,
        regex	=> '^[0-9]+\z',
       ),
    Garmin::FIT::Streamer::BaseType->new(
        name	=> "byte",
        number	=> 0x0D,
        size	=> 0,
        decoder	=> ["a", "a"],
        invalid	=> 0xff,
        # regex	=> '^[0-9]+\z',
        notice	=> 1,
       ),
   );

my $base_types = Garmin::FIT::Streamer::BaseType->base_types;

my %keep_tag = map(($_ => 1), qw(body h1 h2 h3 h4 h5 h6 table tr td));

sub get_context {
    # A context should be a consistent single column row
    my $context;
    my $i = 0;
    my $rows = shift;
    for my $row (@$rows) {
        $i++;
        next if $row eq "";
        die "Not a context row '@$rows'" if defined $context;
        $context = $row;
        if (defined $_[0]) {
            $_[0] == $i || die "Inconsistent context column $_[0] vs @$rows";
        } else {
            $_[0] = $i;
        }
    }
    return $context;
}

sub spew {
    my ($file, $content) = @_;
    my $new = "$file.new";
    open(my $fh, ">", $new) || die "Could not open '$new': $!";
    eval {
        print($fh $content) || die "Error writing to '$new': $!";
        close($fh) || die "Could not close '$new': $!";
        rename($new, $file) || die "Could not rename '$new' to '$file' $!";
    };
    if ($@) {
        $fh = undef;
        unlink($new) || die "Could not unlink '$new': $! after $@";
        die $@;
    }
}

# Do a basic parse of the HTML file into a perl data structure
sub sheets_from_html {
    my ($html_file) = @_;

    open(my $ifh, "<", $html_file) || die "Could not open '$html_file': $!";
    my $html = do { local $/; <$ifh> };
    close($ifh) || die "Could not close '$html_file': $!";

    # Normalize attributes
    $html =~ s{<(/?)(\w+).*?(/?)>}{$keep_tag{lc $2} ? "<$1\L$2$3>" : ""}eg;
    my (%sheets, $sheet_name);
    while ($html =~ s{(.*?)<h(\d+)>Sheet\s+\d+:\s*([^<]*?)</h\2>}{}s) {
        $sheets{$sheet_name} = $1 if defined $sheet_name;
        $sheet_name = lc $3;
        die "Already have a sheet named '$sheet_name'" if $sheets{$sheet_name};
    }
    defined $sheet_name || die "Found no sheets";
    $sheets{$sheet_name} = $html;

    for my $sheet_name (sort keys %sheets) {
        eval {
            my ($html) = $sheets{$sheet_name} =~ m{<table>\s*(.*)</table>}s or
            die "Could not find <table> ... </table>";
            my (@rows, $nr_cols);
            while ($html =~ m{<tr>(.*?)</tr>}sg) {
                my @row = $1 =~ m{<td>\s*(.*?)\s*</td>}sg;
                # html unescape
                for (@row) {
                    s/&lt;/</g;
                    s/&gt;/>/g;
                    s/&quot;/"/g;
                    s/&amp;/&/g;
                }
                if (defined $nr_cols) {
                    $nr_cols == @row || die "Inconsistent number of rows";
                } else {
                    $nr_cols = @row;
                }
                push @rows, \@row;
            }
            my $headers = shift @rows || die "No headers";
            my %headers;
            for my $header (@$headers) {
                $header =~ s/#/nr/g;
                $header =~ s/\s+/_/g;
                $header = lc $header;
                die "Dumplicate header '$header'" if $headers{$header};
            }
            my (%tables, $table, $context, $context_index, $offset);
            for my $row (@rows) {
                if ($row->[0] eq "") {
                    if (!defined $table) {
                        $context = get_context($row, $context_index);
                    } elsif ($table) {
                        push @$table, \my %props;
                        my $data;
                        for my $i ($offset..$#$row) {
                            next if $row->[$i] eq "";
                            $props{$headers->[$i]} = $row->[$i] =~ /^0x[0-9a-fA-F]+\z/ ? hex $row->[$i] : $row->[$i];
                            $data ||= 1;
                        }
                        if (!$data) {
                            # We assume an empty line finishes the table
                            pop @$table;
                            $table = undef;
                        }
                    } else {
                        die "Row outside table: @$row";
                    }
                } else {
                    my $table_name = $row->[0];
                    $table = [];
                    $tables{lc $table_name} = {
                        name	=> $table_name,
                        table	=> $table,
                        defined $context ? (context	=> $context) : (),
                    };
                    $offset = 1;
                    while ($row->[$offset] ne "") {
                        $tables{lc $table_name}{$headers->[$offset]} = $row->[$offset];
                        $offset++;
                    }
                    # Extra attributes (typically a table comment)
                    for my $i ($offset+1..$#$row) {
                        $tables{lc $table_name}{$headers->[$i]} = $row->[$i] if
                            $row->[$i] ne "";
                    }
                }
            }
            $sheets{$sheet_name} = \%tables;
        };
        die "Sheet $sheet_name: $@" if $@;
    }
    return \%sheets;
}

sub types_from_sheets {
    my ($sheets) = @_;

    my $types = $sheets->{types} || die "No types sheet";

    # Fake a bool type
    die "Already have type bool" if $types->{bool};
    $types->{bool} = {
        name		=> "bool",
        base_type	=> 'enum',
        table => [{
            value	=> "0",
            value_name	=> 'no',
        }, {
            value	=> "1",
            value_name	=> 'yes',
        }],
    };

    for my $type_name (sort keys %$types) {
        eval {
            my $type = $types->{$type_name};
            die "Already have values" if $type->{values};
            $type->{values} = delete $type->{table};
            my $type_class =
                $type_class{$type_name} || "Garmin::FIT::Streamer::Type";
            $type_class->new(%$type);
        };
        die "Type '$type_name': $@" if $@;
    }

    # Now fake the base_types as more complex types
    for my $base_type (@base_types) {
        Garmin::FIT::Streamer::Type->new(
            name	=> $base_type->name,
            base_type	=> $base_type,
            );
    }
}

sub profile_from_sheets {
    my ($sheets) = @_;

    my $messages = $sheets->{messages} || die "No messages sheet";
    my $message_numbers = Garmin::FIT::Streamer::Type->from_id("mesg_num");
    for my $message_name (sort keys %$messages) {
        eval {
            my $message = $messages->{$message_name};

            my @fields;
            for my $row (@{$message->{table}}) {
                defined(my $field_number = $row->{field_def_nr}) || next;

                my $array;
                if (defined $row->{array}) {
                    $row->{array} =~ /^\[(.+)\]\z/ ||
                        die "Could not parse array specification '$row->{array}'";
                    $array = $1;
                }

                push @fields, Garmin::FIT::Streamer::Field->new(
                    name	=> $row->{field_name},
                    number	=> $field_number,
                    type	=> $row->{field_type},
                    scale	=> $row->{scale},
                    offset	=> $row->{offset},
                    bits	=> $row->{bits},
                    accumulate	=> $row->{accumulate},
                    unit	=> $row->{units},
                    array	=> $array,
                    );
            }
            @fields || die "No usable rows";

            Garmin::FIT::Streamer::Message->new(
                name	=> $message->{name},
                number	=> $message_numbers->value_value($message->{name}),
                fields	=> \@fields,
                context => $message->{context},
                comment => $message->{comment},
               );
        };
        die "Definition '$message_name': $@" if $@;
    }
}

sub unslash {
    my ($str) = @_;
    $str =~ s/\\\\/\\/g;
    return $str;
}

@ARGV == 3 ||
    die "Syntax: profile_from_html profile_file profile_dump html_file\n";
my ($profile_file, $profile_dump, $html_file) = @ARGV;

# First convert the html to a usable perl data structure
my $sheets = sheets_from_html($html_file);
spew($profile_dump, Dumper($sheets));

# Next construct a usable profile out of the perl data structure
types_from_sheets($sheets);
my $types = Garmin::FIT::Streamer::Type->types;
profile_from_sheets($sheets);
my $profile = Garmin::FIT::Streamer::Message->profile;
$profile = do {
    local $Data::Dumper::Varname = "profile";
    local $Data::Dumper::Purity = 1;
    Data::Dumper->Dump(
        [  $base_types,$types,$profile,\@crc16_low,\@crc16_high,$crc16_modulo],
        [qw(base_types  types  profile   crc16_low   crc16_high  crc16_modulo)]);
};
chomp $profile;
$profile =~ s{('regex'\s*=>\s*)'(.*)'(,)}{"$1qr{" . unslash($2) . "}$3"}eg;
$profile =~ s{^([^\S\n]*([0-9]+)),?[^\S\n]*\n}{
    sprintf("%s,%s\t# %04x\n", $1, length($1) <= 6 ? "\t" : "", $2)
}gem;

open(my $fh, "<", $profile_file) || die "Could not open '$profile_file': $!";
my $profile_content = do { local $/; <$fh> };
close($fh) || die "Could not close '$profile_file': $!";

$profile_content =~ /\n=cut\s*\z/ ||
    die "File '$profile_file' does not end on =cut";

$profile_content =~ s{
    \n
    \# [^\S\n]* BEGIN [^\S\n]+ GENERATED [^\S\n]* \n
    (.*\n)*
    \# [^\S\n]* END [^\S\n]+ GENERATED [^\S\n]*
    \n
}{
# BEGIN GENERATED
# Generated from file '$html_file' by program '$0'

sub PROFILE_MAJOR() {   1 }
sub PROFILE_MINOR() {  20 }
sub PROFILE_SCALE() { 100 }

sub PROTOCOL_MAJOR() {  1 }
sub PROTOCOL_MINOR() {  0 }
sub PROTOCOL_SCALE() { 16 }

sub PROFILE_VERSION() {
    return PROFILE_MAJOR() * PROFILE_SCALE() + PROFILE_MINOR();
}

sub PROTOCOL_VERSION() {
    return PROTOCOL_MAJOR() * PROTOCOL_SCALE() + PROTOCOL_MINOR();
}

$profile
# END GENERATED
}x || die "Could not find GENERATED marks";

spew($profile_file, $profile_content);

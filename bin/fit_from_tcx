#!/usr/bin/perl -w
use strict;
use warnings;

use lib "blib/lib";

our $VERSION = "1.000";

use XML::LibXML;
use Getopt::Long 2.11;

use Garmin::FIT::Streamer;
# nominal speed = 12mph
my $mile = 1609.344;
my $speed = 12*$mile / 3600;

# We assume a spherical earth. Should be good enough
use constant {
    EARTH_RADIUS	=> 6371000,
    PI			=> atan2(0,-1),
};
use constant {
    EARTH_RADIUS4	=> 4*EARTH_RADIUS,
    DEG_TO_RAD		=> PI/180,
    DEG_TO_HAVER	=> PI/360,
};

&Getopt::Long::config("bundling", "require_order");
die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("name=s"		=> \my $first_name,
               "version!"	=> \my $version,
               "U|unsafe!"	=> \my $unsafe,
               "h|help!"	=> \my $help);
if ($version) {
    print<<"EOF";
fit_from_tcx (Garmin::FIT::Streamer) $VERSION
EOF
    exit 0;
}
if ($help) {
    require Config;
    $ENV{PATH} .= ":" unless $ENV{PATH} eq "";
    $ENV{PATH} = "$ENV{PATH}$Config::Config{'installscript'}";
    exec("perldoc", "-F", $unsafe ? "-U" : (), $0) || exit 1;
    # make parser happy
    %Config::Config = ();
}

@ARGV == 2 || die "Syntax in_file.tcx out_file.fit\n";
my ($in_file, $out_file) = @ARGV;

die "Empty name option\n" if defined $first_name && $first_name eq "";

my $xpc;
my $now = time();
my $sport = "generic";

sub get_value {
    my ($node, $name) = @_;
    my @values = $xpc->findnodes("xsi:$name", $node) or
        die "Could not find child node '$name' in node '", $node->nodeName, "'";
    @values == 1 ||
        die "Found multiple '$name' children in node '", $node->nodeName, "'";
    my $value = $values[0]->to_literal;
    die "Empty child node '$name' in node '", $node->nodeName, "'" if
        $value eq "";
    return $value;
}

my $parser = XML::LibXML->new();
$parser->line_numbers(1);
$parser->expand_xinclude(1);
$parser->keep_blanks(0);

my $doc = $parser->parse_file($in_file);
my $root = $doc->documentElement();

$root->nodeName eq "TrainingCenterDatabase" ||
   die("The root element is not 'TrainingCenterDatabase' but '" .
         $root->nodeName . "'");

$xpc = XML::LibXML::XPathContext->new;
$xpc->registerNs("xsi", "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2");

my $fit = Garmin::FIT::Streamer->new(
    unit_preferences	=> {
        semicircles	=> "degrees",
    }
);
my $file_id_definition = $fit->define(
    "file_id",
    "time_created",
    "type");
$fit->put($file_id_definition, $now, "course");
my $lap_definition = $fit->define(
    "lap",
    "timestamp",
    "start_time",
    "start_position_lat",
    "start_position_long",
    "end_position_lat",
    "end_position_long",
    "total_timer_time",
    "total_distance",
    'nec_lat',
    'nec_long',
    'swc_lat',
    'swc_long',
    "event",
    "event_type",
    "lap_trigger",
    "sport",
   );
my $event_definition = $fit->define(
    "event",
    "timestamp",
    "data",
    "event",
    "event_type",
    "event_group",
);
my $record_definition = $fit->define(
    "record",
    "timestamp",
    "position_lat",
    "position_long",
    "distance",
   );
my @courses = $xpc->findnodes("xsi:Courses", $root) or
    die "Could not find element /TrainingCenterDatabase/Courses";

my $max_name_length = 0;
my $max_point_name_length = 0;
for my $courses (@courses) {
    my $course_name;
    my @course = $xpc->findnodes("xsi:Course", $courses) or
        die "Could not find element Course";
    for my $course (@course) {
        if ($max_name_length == 0 && defined $first_name) {
            $max_name_length = length $first_name;
        } else {
            my $name = get_value($course, "Name");
            $max_name_length = length $name if $max_name_length < length $name;
        }
        for my $course_point ($xpc->findnodes("xsi:CoursePoint", $course)) {
            my $name = get_value($course_point, "Name");
            $max_point_name_length = length $name if
                $max_point_name_length < length $name;
        }
    }
}
$max_name_length || die "No courses";

my $course_definition = $fit->define(
    "course",
    {
        model_field	=> "name",
        size		=> $max_name_length+1,
    },
    "capabilities",
    "sport",
   );

my $course_point_definition;
$course_point_definition = $fit->define(
    "course_point",
    "timestamp",
    "position_lat",
    "position_long",
    {
        model_field	=> "name",
        size		=> $max_point_name_length+1,
    },
    "message_index",
    "type",
) if $max_point_name_length;

for my $courses (@courses) {
    my $course_name;
    my @course = $xpc->findnodes("xsi:Course", $courses) or
        die "Could not find element Course";
    for my $course (@course) {
        my @laps;
        for my $child ($course->childNodes) {
            my $name = $child->nodeName;
            if ($name eq "Name") {
                die "Already have a course name" if defined $course_name;
                my $course_name = $child->to_literal;
                if (defined $first_name) {
                    $course_name = $first_name;
                    $first_name = undef;
                }
                die "Empty name" if $course_name eq "";
                $fit->put($course_definition,
                          $course_name,
                          # "Zombie7",
                          # proceessed: 0x01
                          # valid:      0x02
                          0x200 | 0x100 | 0x02 | 0x01,
                          # 0x200 | 0x100,
                          $sport);
            } elsif ($name eq "Lap") {
                push @laps, [$child, []];
            } elsif ($name eq "Track") {
                @laps || die "$name outside lap";
                push @{$laps[-1]}, $child;
            } elsif ($name eq "CoursePoint") {
                @laps || die "$name outside lap";
                push @{$laps[-1][1]}, $child;
            } elsif ($name eq "Creator") {
                # Currently ignored
            } else {
                die "Unhandled Course child '$name'";
            }
        }
        @laps || die "No laps";
        for my $tracks (@laps) {
            my $lap = shift @$tracks;
            my $course_points = shift @$tracks;

            my @points;

            # What if you are near the back of the earth ?
            # Then min and max like this make no sense
            # I don't live near there, so I can't test what Garmin does in
            # that case...
            # possible better algorithm: average all positions, use that as 0
            # do naive min/max then rezero
            # Punt on it for now, I live near greenwich :-)

            my $min_lat = 91;
            my $min_long = 181;
            my $max_lat = -91;
            my $max_long = -181;
            @$tracks || die "Lap without tracks";

            my $total_distance	= 0;
            for my $track (@$tracks) {
                my @p = $xpc->findnodes("xsi:Trackpoint", $track) or
                    die "Track without trackpoints";
                my $prev;
                for my $point (@p) {
                    my @pos = $xpc->findnodes("xsi:Position", $point);
                    die "Multiple positions in point" if @pos > 1;
                    if (!@pos) {
                        warn("Dropping Trackpoint without Positions\n");
                        next;
                    }
                    my $lat  = get_value($pos[0], "LatitudeDegrees");
                    $min_lat = $lat if $lat < $min_lat;
                    $max_lat = $lat if $lat > $max_lat;
                    my $long = get_value($pos[0], "LongitudeDegrees");
                    $min_long = $long if $long < $min_long;
                    $max_long = $long if $long > $max_long;

                    # Calculate distance between points using haversine
                    if (@points) {
                        my $x = sin(($lat-$prev->[1])*DEG_TO_HAVER)**2 + cos($lat * DEG_TO_RAD) * cos($prev->[1] * DEG_TO_RAD)*sin(($long-$prev->[2])*DEG_TO_HAVER)**2;
                        # Bummer, core perl has no asin
                        # Calculate in terms of atan2
                        my $dist = atan2(sqrt($x), 1+sqrt(1-$x)) * EARTH_RADIUS4;
                        $total_distance += $dist;
                    }
                    my $time = int($total_distance/$speed);
                    push @points, $prev = [$time, $lat, $long, $total_distance];
                }
            }

            $fit->put($lap_definition,
                      $now,		# timestamp
                      0,		# start_time
                      $points[ 0][1], $points[ 0][2],	# start_pos
                      $points[-1][1], $points[-1][2],	# end_pos
                      $total_distance / $speed,
                      $total_distance,
                      $max_lat, $max_long,	# north east corner
                      $min_lat, $min_long,	# south west corner
                      'lap',
                      'stop',
                      'session_end',
                      $sport);
            $fit->put($event_definition,
                      0,
                      0,
                      'timer',
                      'start',
                      0);
            for my $point (@points) {
                $fit->put($record_definition, @$point);
            }
            my $index = 0;
            for my $course_point (@$course_points) {
                my @pos = $xpc->findnodes("xsi:Position", $course_point);
                die "Multiple positions in CoursePoint" if @pos > 1;
                if (!@pos) {
                    warn("Dropping CoursePoint without Positions\n");
                    next;
                }
                $fit->put(
                    $course_point_definition,
                    get_value($course_point, "Time"),
                    get_value($pos[0], "LatitudeDegrees"),
                    get_value($pos[0], "LongitudeDegrees"),
                    get_value($course_point, "Name"),
                    $index,
                    "generic",
                   );
                ++$index;
            }
            $fit->put($event_definition,
                      $total_distance / $speed,
                      0,
                      'timer',
                      'stop_all',
                      0);
        }
    }
}

if ($out_file eq "") {
    binmode STDOUT;
    $fit->to_handle(\*STDOUT);
} else {
    $fit->to_file($out_file);
}
